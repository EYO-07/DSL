using System;
using System.Collections.Generic;
using System.Drawing;
using System.Windows.Forms;

namespace MiniSystemMonitor
{
    public partial class MainForm : Form
    {
        // Vectors (Lists) of labels for each hardware type
        private List<Label> _cpuLabels;
        private List<Label> _gpuLabels;
        private List<Label> _ramLabels;
        private List<Label> _diskLabels;

        // Dictionary mapping hardware names to labels
        private Dictionary<string, Label> _labelDict;

        // Wrapper object to access hardware info
        private readonly OpenHardwareLibWrapper _wrapper;

        // Timer for periodic updates
        private readonly System.Windows.Forms.Timer _updateTimer;

        // Constructor
        public MainForm()
        {
            InitializeComponent(); // Generated by designer

            // Initialize collections
            _cpuLabels = new List<Label>();
            _gpuLabels = new List<Label>();
            _ramLabels = new List<Label>();
            _diskLabels = new List<Label>();
            _labelDict = new Dictionary<string, Label>();

            // Initialize wrapper
            _wrapper = new OpenHardwareLibWrapper();
            _wrapper.UpdateInfo(); // Initial update to populate data

            // Initialize UI components
            InitializeLabels();

            // Resize form based on labels
            ResizeForm();

            // Set up timer
            _updateTimer = new System.Windows.Forms.Timer
            {
                Interval = 1000 // 1000 ms = 1 second
            };
            _updateTimer.Tick += (s, e) => UpdateForm(); // Associate Tick event with Update method
            _updateTimer.Start();
        }

        // Initialize labels for each hardware component
        private void InitializeLabels()
        {
            int yPosition = 3; // Initial Y position with 3px padding
            int last_label_location_Y = 0;
            int last_label_height = 0;
            foreach (var kvp in _wrapper.HardwareDict)
            {
                HardwareInfo hardware = kvp.Value;
                Label label = new Label
                {
                    Text = $"[ {hardware.Type} ] {hardware.Info()}",
                    AutoSize = true
                };

                // Set position
                if (yPosition == 3 && _labelDict.Count == 0)
                {
                    label.Location = new Point(3, yPosition); // First label at 3px from top
                    last_label_location_Y = label.Location.Y;
                    last_label_height = label.Height;
                }
                else
                {
                    // Label lastLabel = _labelDict[_wrapper.HardwareDict.Keys.LastBefore(kvp.Key)];
                    yPosition = last_label_location_Y + last_label_height + 3; // 3px padding
                    label.Location = new Point(3, yPosition);
                    last_label_location_Y = label.Location.Y;
                    last_label_height = label.Height;
                }

                // Add to appropriate list and dictionary
                if (hardware.Type == "CPU")
                    _cpuLabels.Add(label);
                else if (hardware.Type == "GPU")
                    _gpuLabels.Add(label);
                else if (hardware.Type == "RAM")
                    _ramLabels.Add(label);
                else if (hardware.Type == "Disk")
                    _diskLabels.Add(label);

                _labelDict[hardware.Name] = label;
                Controls.Add(label); // Add to form
            }
        }

        // Resize the form based on the last label and widest label
        private void ResizeForm()
        {
            if (_labelDict.Count == 0) return;

            // Find the last label and widest label
            Label lastLabel = null;
            int maxWidth = 0;
            foreach (var label in _labelDict.Values)
            {
                if (lastLabel == null || label.Location.Y > lastLabel.Location.Y)
                    lastLabel = label;
                if (label.Width > maxWidth)
                    maxWidth = label.Width;
            }

            // Set form size with padding
            ClientSize = new Size(maxWidth + 6, lastLabel.Location.Y + lastLabel.Height + 6); // 3px padding on all sides
        }

        // Update method to refresh UI
        public void UpdateForm()
        {
            _wrapper.UpdateInfo(); // Refresh hardware data

            // Update each label's text
            foreach (var kvp in _labelDict)
            {
                string hardwareName = kvp.Key;
                Label label = kvp.Value;
                HardwareInfo hardware = _wrapper.HardwareDict[hardwareName];
                label.Text = $"[ {hardware.Type} ] {hardware.Info()}";
            }
        }

        // Clean up resources on form close
        protected override void OnFormClosing(FormClosingEventArgs e)
        {
            _updateTimer.Stop();
            _wrapper.Dispose();
            base.OnFormClosing(e);
        }
    }
}












